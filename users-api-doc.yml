openapi: 3.0.3
info:
  title: Users API
  version: 1.0.0
  description: API for user management, authentication, and role administration.
servers:
  - url: http://localhost:3000/api
paths:
  /users/authenticate:
    post:
      summary: Authenticate user and obtain API Key
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: User credentials
              properties:
                username:
                  type: string
                  description: Username of the user
                password:
                  type: string
                  description: Password of the user
              required:
                - username
                - password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
        '401':
          description: Invalid credentials
  /users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal error
    post:
      summary: Create a new user
      tags: [Users]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation error
        '403':
          description: Insufficient permissions
        '404':
          description: User already exists or not found
  /users/{username}:
    get:
      summary: Get user by username
      tags: [Users]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user
      tags: [Users]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation error
        '404':
          description: User not found
    delete:
      summary: Delete user
      tags: [Users]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
  /users/{username}/api-key:
    post:
      summary: Regenerate user's API Key
      tags: [Users]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API Key regenerated
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
        '404':
          description: User not found
  /users/{username}/role:
    put:
      summary: Change user's role
      tags: [Users]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [ADMIN, MANAGER, EVALUATOR]
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid role
        '404':
          description: User not found
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        apiKey:
          type: string
        role:
          type: string
          enum: [ADMIN, MANAGER, EVALUATOR]
    UserInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [ADMIN, MANAGER, EVALUATOR]
      required:
        - username
        - password
